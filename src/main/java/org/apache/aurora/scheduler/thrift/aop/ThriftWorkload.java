/**
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.aurora.scheduler.thrift.aop;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.util.function.Function;

import org.apache.aurora.gen.Result;

/**
 * Marks a scheduler thrift server method as a target for workload measuring.
 */
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface ThriftWorkload {

  /**
   * Translates Thrift server call {@link Result} to an {@literal Integer} that represents the
   * amount of workload generated by the call.
   */
  interface ThriftWorkloadCounter extends Function<Result, Integer> { }

  /**
   * Specify the class that will do the thrift load mapping.
   */
  Class<? extends ThriftWorkloadCounter> value() default ThriftWorkloadCounterImpl.class;

  class ThriftWorkloadCounterImpl implements ThriftWorkloadCounter {
    @Override
    public Integer apply(Result result) {
      int count = 0;
      if (result.hasScheduleStatusResult()) {
        count = result.getScheduleStatusResult().getTasks().size();
      } else if (result.hasGetPendingReasonResult()) {
        count = result.getGetPendingReasonResult().getReasons().size();
      } else if (result.hasConfigSummaryResult()) {
        count = result.getConfigSummaryResult().getSummary().getGroups().size();
      } else if (result.hasRoleSummaryResult()) {
        count = result.getRoleSummaryResult().getSummaries().size();
      } else if (result.hasJobSummaryResult()) {
        count = result.getJobSummaryResult().getSummaries().size();
      } else if (result.hasGetJobsResult()) {
        count = result.getGetJobsResult().getConfigs().size();
      } else if (result.hasGetJobUpdateSummariesResult()) {
        count = result.getGetJobUpdateSummariesResult().getUpdateSummaries().size();
      } else if (result.hasGetJobUpdateDetailsResult()) {
        count = result.getGetJobUpdateDetailsResult().getDetailsList().size();
      }
      return count;
    }
  }

}
